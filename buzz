module buzz(en, buzz, buzz_n, clk, rst_n);
input en;
input clk, rst_n;
output logic buzz,buzz_n;
logic [12:0]bit_cnt;

always @(posedge clk or negedge rst_n) begin 
 		if(~rst_n) begin 
 			bit_cnt <= 0; 
		end else if (en == 1) begin  
 			bit_cnt <= bit_cnt + 1; 
		end else if (en == 1 && bit_cnt == 13'h186A) begin
			bit_cnt <= 0;
 		end else begin
                         bit_cnt <= bit_cnt;
 		end 
end

always @(posedge clk or negedge rst_n) begin 
 if(~rst_n) begin 
 	buzz <= 0; 
 end else if(bit_cnt == 13'h186A) begin
        buzz <= ~buzz;
 end else begin
   	buzz <= buzz;
 end

end

assign buzz_n = ~buzz;

/*assign buzz_n = ~buzz;*/
	/*assign buzz = (bit_cnt == 16'h186A) ? 1: 0;
	assign buzz_n = (bit_cnt == 16'h186A) ? 0: 1; */
endmodule 
